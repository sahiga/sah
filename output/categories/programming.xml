<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sahiga (Posts about programming)</title><link>https://www.stephaniehiga.com/</link><description></description><atom:link href="https://www.stephaniehiga.com/categories/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 12 Apr 2020 21:12:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Off to Hack Reactor</title><link>https://www.stephaniehiga.com/posts/off-to-hack-reactor/</link><dc:creator>Stephanie A. Higa</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm going to &lt;a class="reference external" href="http://www.hackreactor.com"&gt;Hack Reactor&lt;/a&gt; next week!&lt;/p&gt;
&lt;p&gt;Hack Reactor is a programming bootcamp -- the most intense of its kind, at eleven hours a day, six days a week, for twelve weeks. Pretty much everyone I've mentioned it to has recoiled in horror, imagining what it would be like to spend so much time cooped up in front of a screen. Yeah, I know. It sounds terrible. It might even sound nonsensical. But here I am anyway: packing my bags, preparing to fly to San Francisco in a few days, and writing about the program that will take over my life for the next three months.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Last August I happened upon A List Apart during work hours, likely in search of CSS help. I'm sure I found what I was looking for, but what caught my eye was an ad for Hack Reactor. Twelve-week immersive programming bootcamp! Six-figure average starting salary! It seemed too good to be true.&lt;/p&gt;
&lt;p&gt;The only programming bootcamp I'd heard of was General Assembly's Web Development Immersive, which had briefly interested me until I lucked into a front-end development role at my company back in 2013. I'd even taken a couple of General Assembly classes -- Intro to Data Science and Analysis (at their Santa Monica campus) and Optimizing Landing Pages for Conversion (online) -- neither of which had impressed me.&lt;/p&gt;
&lt;p&gt;But Hack Reactor looked like a completely different species of bootcamp. It looked like something I needed.&lt;/p&gt;
&lt;p&gt;Many people have questioned why I would need a bootcamp when I already have a career in web development. So I feel compelled to explain my reasoning here.&lt;/p&gt;
&lt;p&gt;I may not be a novice programmer, but I learned to code recently enough that I remember what it was like to be a novice programmer and how much I struggled to even get to that point. I'm a late bloomer: after years of grappling with for loops and other basic concepts, I finally managed to make sense of programming at the ripe old age of 23. (In fact, I was weeks, maybe even days, away from 24 at that point.) The book that did it for me is &lt;a class="reference external" href="http://www.nltk.org/book/"&gt;Natural Language Processing with Python&lt;/a&gt; -- a truly wonderful read, if you're more inclined to language than math, as I am.&lt;/p&gt;
&lt;p&gt;Learning to code was a terrific, frustrating, enlightening experience. When I realized I could solve problems in Python, I was shocked. People had told me that it was impossible to learn to code after a certain age, that developers had an "innate ability" that I didn't have. (By the way, if anyone ever says such complete and utter bullshit to you, you must prove them wrong.)&lt;/p&gt;
&lt;p&gt;Soon after I taught myself basic Python, I offered to build a WordPress theme for a project at work, through which I picked up jQuery and a tiny bit of PHP. Within half a year, the company decided to move me from the business team to the development team; from there, I learned a ton on the job and eventually served as the sole front-end developer and designer. By August 2014, when that Hack Reactor ad showed up on my work computer, I had more than a passing familiarity with JavaScript. I wrote it almost daily. I'd used AngularJS for three different projects. And if you'd asked me, I would have told you, yes, I know how to code...&lt;/p&gt;
&lt;p&gt;...while a dark, ever-evolving nugget of truth blossomed in the back of my mind, containing my lack of knowledge of closures, compilers, systems, dependency injection, Big-O notation, hash tables, pointers, concurrency, multithreading, inheritance, and everything else that differentiated a computer science prodigy from clueless, fumbling me. There were countless times when I honestly had no idea what I was doing. I flailed around in the darkness, fashioning solutions out of bits and pieces of StackOverflow answers. Programming was like magic to me. I had vague notions of why things worked out in the end -- but only vague, and only notions.&lt;/p&gt;
&lt;p&gt;Before you start thinking I've got impostor syndrome, let me bring up &lt;a class="reference external" href="https://medium.com/@aliciatweet/overcoming-impostor-syndrome-bdae04e46ec5"&gt;this post&lt;/a&gt;, which Hack Reactor recommended. I don't identify with this mindset at all. For one, I actually &lt;em&gt;am&lt;/em&gt; an impostor. And second, I actually &lt;em&gt;don't&lt;/em&gt; have a background in computer science or anything related to it. Unlike the author, I didn't take programming classes in high school, didn't study CS/CE in college, never cofounded a software startup, and never worked for a tech giant.&lt;/p&gt;
&lt;p&gt;Here's my history with computers prior to the age of 23. When I was eleven, I fell in love with the Geocities-era web and taught myself HTML and CSS. But I had no interest in programming whatsoever. In high school, I was convinced that I would be a novelist (that didn't pan out). In college, I was convinced that I would be an architect (that didn't pan out either), and I was the most Luddite architecture major you could imagine. When our professors told us to use Photoshop, I stuck with Microsoft Paint; when I saw my classmates saving time by using the AutoCAD command line, I turned up my nose. I produced hand drawings whenever possible. I put off learning Rhino, the school-sanctioned 3D drawing program, until mere days leading up to my final review. And my 3D renderings were wretched: oddly colored, unrealistic, physically unsound boxes. Needless to say, I had no future as an architect.&lt;/p&gt;
&lt;p&gt;When I graduated at 21, I had a strange epiphany that I would make my living off computers. What's even stranger is that it turned out to be true. But I still haven't shaken off the Luddite cloak, which is ultimately why I decided to apply to Hack Reactor.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;After seeing the Smashing Magazine ad, I researched all the programming bootcamps I could find. I immediately ruled out the ones that taught Ruby on Rails (which, by the way, is nearly all of them). Eventually I settled on two: Hack Reactor, my first choice by a long shot, and MakerSquare, as a backup. Hack Reactor appealed to me because of its laser focus on one language, JavaScript, and its intensity.&lt;/p&gt;
&lt;p&gt;The MakerSquare interview came first. They stood me up. The admissions coordinator scheduled another interview, but alas, no one showed up to that one, either. How ridiculously unprofessional! So I canceled my application. (The funny part is that Hack Reactor recently acquired MakerSquare.)&lt;/p&gt;
&lt;p&gt;When my Hack Reactor interview rolled around, at 10 a.m. on a bleak September Saturday, I was pessimistic. I downloaded Skype onto my computer about half an hour before the interview. The last time I'd used Skype was in 2011 or so, and I'd never used it for video calls. At 9:50, my interviewer messaged me, saying that he would begin the interview soon. Around that time, I checked the calendar confirmation email, and that's when I realized it would be a technical interview.&lt;/p&gt;
&lt;p&gt;That's right. I confess to having done zero preparation whatsoever for my Hack Reactor interview. &lt;strong&gt;DO NOT DO THIS.&lt;/strong&gt; It was a dreadful mistake on my part, and the only reason I managed to cope with coding in real-time on a Google Doc with zero prep was because I'd been writing JavaScript nearly every day for over a year at that point. I was nervous as hell. Fortunately, my interviewer was really cool. He gave me plenty of hints and encouraged me to talk through my thought process. Thanks to his help, I managed to complete the functions he asked me to write, but I came away feeling like I'd bombed the interview. He told me I would hear back within a week.&lt;/p&gt;
&lt;p&gt;Two days later, I got to work, fired up my email, and what did I find? An enrollment agreement and acceptance letter from Hack Reactor. I checked the email headers and freaked out. They'd sent the decision to me within &lt;em&gt;three hours&lt;/em&gt; of the end of my interview; I simply hadn't seen it because my application was tied to my GitHub account, which was in turn tied to my work email address.&lt;/p&gt;
&lt;p&gt;I wrote back to the HR admission team. I deluged them with questions. I connected with HR alumni on LinkedIn and deluged &lt;em&gt;them&lt;/em&gt; with questions. I pushed back my start date from December 8, the cohort I'd applied for, to February 2. I sat on the enrollment agreement for a couple of months.&lt;/p&gt;
&lt;p&gt;Then I decided to go.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Hack Reactor used to devote the first two weeks of the course to JavaScript fundamentals. Now they require students to complete a separate precourse curriculum, ensuring that everyone possesses a certain level of JavaScript knowledge before starting the program. I'm under oath not to reveal details about the precourse work, but, as other bloggers have mentioned, it involves cloning a popular functional JavaScript library as well as the front-end of a popular social media site.&lt;/p&gt;
&lt;p&gt;My advice for the precourse work? Complete it as soon as possible so you don't have to worry about it. The estimated amount of time is 50-80 hours. I'm pretty sure I completed the precourse work in fewer hours than that, but I also rushed through it to make time for the edX functional programming class I mentioned in my last entry. Looking back, I'm happy I stayed with the functional programming class, as it sharpened my brain and made the precourse work look quite simple by comparison. But I'm not sure I would recommend doing this, especially around the holidays. It was stressful.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Deciding to attend Hack Reactor isn't like deciding to go to college, or deciding to accept a job offer. It's an expensive, unaccredited program, and people will wonder if it's a scam when you tell them about it.&lt;/p&gt;
&lt;p&gt;Career-wise, it's probably the most difficult decision I've ever made. To be honest, I'm still not sure it's the right choice, but all I can really do at this point is look forward to the future. I'm beyond excited. Plus, Hack Reactor encourages blogging, so I'll be posting here more frequently!&lt;/p&gt;&lt;/div&gt;</description><category>hack reactor</category><category>programming</category><guid>https://www.stephaniehiga.com/posts/off-to-hack-reactor/</guid><pubDate>Mon, 26 Jan 2015 23:45:45 GMT</pubDate></item><item><title>Review: Introduction to Functional Programming</title><link>https://www.stephaniehiga.com/posts/review-introduction-to-functional-programming/</link><dc:creator>Stephanie A. Higa</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently I completed Delft University's fall 2014 offering of &lt;a class="reference external" href="https://www.edx.org/course/introduction-functional-programming-delftx-fp101x"&gt;Introduction to Functional Programming (FP101x)&lt;/a&gt; on edX. I've been interested in functional programming for a while (caught the bug when I learned about Python list comprehensions), so I was really excited for this class. It turned out to be one of the better MOOCs I've taken, and definitely the most challenging.&lt;/p&gt;
&lt;p&gt;My takeaways from the class:&lt;/p&gt;
&lt;div class="section" id="functional-programming-is-cool"&gt;
&lt;h2&gt;Functional programming is cool&lt;/h2&gt;
&lt;p&gt;Erik Meijer, the professor, is funny and brilliant, and I came away from many of his lectures thinking, wow, that was fascinating. I've read before that learning how to program in a functional style is like learning how to code all over again, which I found to be true. This class opened my mind to a totally different way of reasoning about the structure and composition of programs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="beginners-beware"&gt;
&lt;h2&gt;Beginners, beware&lt;/h2&gt;
&lt;p&gt;The prerequisite for FP101x is at least one year of experience programming in an imperative language. I've been working with JavaScript since early 2013, and I learned basic Python and C before that, so you'd think I would be fine. NOPE. Both the homework (multiple choice) and labs (programming assignments) started off simple but got mind-numbingly difficult toward the end. The last two labs in particular really stumped me -- we had to implement Poor Man's Concurrency and rose trees, two subjects that weren't even hinted at in the lectures. And don't even get me started on monads.&lt;/p&gt;
&lt;p&gt;I got the sense that Prof. Meijer doesn't typically teach beginners. Based on the assignments and his forum posts, he seemed to have really high expectations of what a MOOC student would be able to accomplish with little guidance and limited time. For me, a total novice, the second half of the class was a struggle. Fortunately, there were plenty of kind, generous folks who took the time to help out their classmates in the forums.&lt;/p&gt;
&lt;p&gt;To anyone who's considering taking FP101x: learn a bit about &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Category_theory"&gt;category theory&lt;/a&gt; first. Also, &lt;a class="reference external" href="http://learnyouahaskell.com/"&gt;basic Haskell&lt;/a&gt; would be good. The class is language-agnostic, but Prof. Meijer used Haskell in all the lectures and homework assignments. From my travels around the discussion forums I'd wager that most of us ended up solving the labs in Haskell, too, although the instructions were provided in multiple languages (Scala, F#, Groovy, Frege, Ruby). It would have been much easier for me to digest the concepts in this class if I hadn't had to learn an entirely new language as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-speaking-of-haskell"&gt;
&lt;h2&gt;But, speaking of Haskell...&lt;/h2&gt;
&lt;p&gt;Seriously, what a gorgeous language.&lt;/p&gt;
&lt;p&gt;I don't understand it. That is, I understand enough of it to know I don't understand it at all. Regardless, I can still appreciate it on a superficial level.&lt;/p&gt;
&lt;p&gt;Say you have a list, and you want to apply one function to the members of the list in odd positions, and another function to the members of the list in even positions. Here's a quick JavaScript implementation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;function oddEvenMap(list, oddFunc, evenFunc) {
  for (var i = 0; i &amp;lt; list.length; i++) {
    if (i % 2 === 0) {
      evenFunc(list[i]);
    } else {
      oddFunc(list[i]);
    }
  }
}&lt;/pre&gt;
&lt;p&gt;And here it is in Haskell:&lt;/p&gt;
&lt;pre class="literal-block"&gt;oddEvenMap :: (a -&amp;gt; b) -&amp;gt; (a -&amp;gt; b) -&amp;gt; [a] -&amp;gt; [b]
oddEvenMap f g [] = []
oddEvenMap f g (x : xs) = f x : oddEvenMap g f xs&lt;/pre&gt;
&lt;p&gt;No variable assignments. No for loops. Haskell is stunningly beautiful and concise. (I realize the comparison to JavaScript isn't fair, but that's the language I know best.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lastly-edx-is-a-great-mooc-platform"&gt;
&lt;h2&gt;Lastly, edX is a great MOOC platform&lt;/h2&gt;
&lt;p&gt;In 2014, Coursera was my MOOC platform of choice, as I'd finished three classes through it at the end of 2013 (&lt;a class="reference external" href="https://www.coursera.org/course/compdata"&gt;Computing for Data Analysis&lt;/a&gt;, &lt;a class="reference external" href="https://www.coursera.org/course/dataanalysis"&gt;Data Analysis&lt;/a&gt;, and &lt;a class="reference external" href="https://www.coursera.org/course/ml"&gt;Machine Learning&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Now edX has taken its place, primarily for usability reasons. Coursera's interface is passable, with many Bootstrappy elements; the videos seem to go on forever. edX's interface is thoughtful and intuitive. Two of my favorite aspects: the video player, which has speed controls and highlighted subtitles that scroll in unison with the instructor's speech, and the homework submission system, which checks each answer individually.&lt;/p&gt;
&lt;p&gt;I will definitely be returning to edX for more classes later this year.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>programming</category><guid>https://www.stephaniehiga.com/posts/review-introduction-to-functional-programming/</guid><pubDate>Sat, 03 Jan 2015 05:47:51 GMT</pubDate></item></channel></rss>