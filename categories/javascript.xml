<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sahiga (Posts about javascript)</title><link>https://www.stephaniehiga.com/</link><description></description><atom:link href="https://www.stephaniehiga.com/categories/javascript.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sat, 08 Oct 2022 23:48:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Degrees of Pynchon</title><link>https://www.stephaniehiga.com/posts/degrees-of-pynchon/</link><dc:creator>Stephanie A. Higa</dc:creator><description>&lt;p&gt;We spent two days last week working on solo projects at Hack Reactor. I built a visualization of literary influences, beginning with &lt;a class="reference external" href="http://thomaspynchon.com/"&gt;Thomas Pynchon&lt;/a&gt; -- who, aside from being totally amazing, a genius, and one of my personal role models, also has a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Thomas_Pynchon#Influence"&gt;lengthy section on Wikipedia&lt;/a&gt; full of writers who influenced him and writers he's influenced.&lt;/p&gt;
&lt;section id="thomas-pynchon-s-circle-of-influence"&gt;
&lt;h2&gt;Thomas Pynchon's circle of influence&lt;/h2&gt;
&lt;p&gt;To visualize the relationships between Pynchon and the writers connected to him, I created an arc diagram  in &lt;a class="reference external" href="http://www.d3js.org"&gt;D3&lt;/a&gt;. Initially, I planned on using D3's built-in &lt;a class="reference external" href="https://github.com/mbostock/d3/wiki/Chord-Layout"&gt;chord layout&lt;/a&gt; generator, but I fell in love with arc diagrams after seeing so many beautiful examples online (e.g., &lt;a class="reference external" href="http://www.chrisharrison.net/index.php/Visualizations/BibleViz"&gt;Bible Cross-References&lt;/a&gt;, &lt;a class="reference external" href="http://www.autodeskresearch.com/pages/infovis/command_usage_arc"&gt;Command Usage Arc Diagrams&lt;/a&gt;, &lt;a class="reference external" href="http://www.turbulence.org/Works/song/gallery/gallery.html"&gt;The Shape of Song&lt;/a&gt;, among others).&lt;/p&gt;
&lt;p&gt;I went down a few rabbit holes, including creating a matrix dataset similar to those required by the chord layout and plotting the writers as nodes on a scale. Thankfully, there's this wonderful &lt;a class="reference external" href="http://bl.ocks.org/sjengle/5431779"&gt;Les Mis√©rables character co-ocurrences arc diagram&lt;/a&gt;, also in D3, which set me on the right track.&lt;/p&gt;
&lt;p&gt;I formatted the influence data into an object with two arrays, &lt;strong&gt;nodes&lt;/strong&gt; and &lt;strong&gt;links&lt;/strong&gt;. Each node contains the name of a writer and a number indicating the writer's category (influencer or influencee), and each link contains a connection between Thomas Pynchon and another writer.&lt;/p&gt;
&lt;figure&gt;
&lt;a class="reference external image-reference" href="http://sahiga.github.io/degrees-of-pynchon"&gt;&lt;img alt="Thomas Pynchon's literary influences" src="https://www.stephaniehiga.com/images/degrees-of-pynchon.png"&gt;&lt;/a&gt;
&lt;figcaption&gt;
&lt;p&gt;Click for the interactive version. I stole the quote from the Simpsons episode in which Thomas Pynchon reviews Marge's book. For anyone unfamiliar with Pynchon: he does not love cameras.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;All the influencers appear to the left of Pynchon, with an arc above the horizontal; all the influencees appear to the right, with an arc below the horizontal. The colors were generated by D3's &lt;a class="reference external" href="https://github.com/mbostock/d3/wiki/Ordinal-Scales#category20b"&gt;category20b scale&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="other-circles-of-influence"&gt;
&lt;h2&gt;Other circles of influence&lt;/h2&gt;
&lt;p&gt;I also wanted to visualize the influences of the other writers. Initially, I added all their connections to Pynchon's graph. This worked for Vladimir Nabokov but failed for Emily Dickinson, who was influenced by a writer who appeared to the right of her (Ralph Waldo Emerson) -- resulting in a backwards connection.&lt;/p&gt;
&lt;p&gt;The solution was to create new graphs and layer them on top of Pynchon's. So, clicking on Nabokov's name (for instance) will fade out Pynchon's graph, increase the size of Nabokov's name, move his name and dot to the center of the page, draw a line from his name to the center dot, and display his influence graph around that new center. Mousing away from Nabokov's graph will delete his graph and bring back Pynchon's.&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Vladimir Nabokov's literary influences" src="https://www.stephaniehiga.com/images/degrees-of-pynchon-new-graph.png"&gt;
&lt;figcaption&gt;
&lt;p&gt;Vladimir Nabokov's literary influences&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Figuring out how to rearrange the new graph around the new center dot was probably the most difficult part of the entire project. I passed the center position to the new graph and gave the influencer dots a negative x-axis position so that they appeared to the left of the center dot.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hover-selections"&gt;
&lt;h2&gt;Hover selections&lt;/h2&gt;
&lt;p&gt;The last feature I added was a hover selection event. Mousing over a writer's name will fade out the entire diagram except for the name, dot, and arc belonging to that writer.&lt;/p&gt;
&lt;figure&gt;
&lt;img alt="Hovering over William S. Burroughs" src="https://www.stephaniehiga.com/images/degrees-of-pynchon-hover.png"&gt;
&lt;figcaption&gt;
&lt;p&gt;Hovering over William S. Burroughs&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This was the second most difficult part of the project, because of the preexisting fade effects associated with the click event. The entire graph fades out upon clicking a name, and the entire graph fades back in when the mouse leaves the new graph.&lt;/p&gt;
&lt;p&gt;I ended up initializing a boolean to keep everything in check: &lt;code class="docutils literal"&gt;multipleGraphsOnPage&lt;/code&gt; starts off as false, becomes true when a new graph is created, and reverts to false when the new graph is deleted. The hover selection event is enabled only when &lt;code class="docutils literal"&gt;multipleGraphsOnPage&lt;/code&gt; is false.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="my-project-completion-strategy"&gt;
&lt;h2&gt;My project completion strategy&lt;/h2&gt;
&lt;p&gt;The purpose of the solo project was not to build a perfect product, but a minimum viable product. Hack Reactor instructed us to reduce the size of our scope in half, twice -- which I didn't even need to do, since I'd deliberately chosen a very small scope to begin with. The extra time afforded me the chance to polish the look and feel of my project, including the animations, and dive deeper into D3.&lt;/p&gt;
&lt;p&gt;This project was really fun. D3 is by far my favorite JavaScript library ever, and I can't wait to make more visualizations with it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="more-d3-svg-resources"&gt;
&lt;h2&gt;More D3 &amp;amp; SVG resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.dashingd3js.com/d3-examples/1-d3-and-javascript-working-with-json"&gt;D3 and JavaScript: Working with JSON&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.d3noob.org/2013/01/how-to-rotate-text-labels-for-x-axis-of.html"&gt;How to rotate the text labels for the x-axis of a D3.js graph&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.dashingd3js.com/svg-text-element"&gt;SVG Text Element&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://tutorials.jenkov.com/svg/path-element.html#arcs"&gt;SVG Path Element&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</description><category>d3</category><category>hack reactor</category><category>javascript</category><guid>https://www.stephaniehiga.com/posts/degrees-of-pynchon/</guid><pubDate>Mon, 16 Mar 2015 02:12:30 GMT</pubDate></item><item><title>Movable AND/OR Statements</title><link>https://www.stephaniehiga.com/posts/movable-andor-statements/</link><dc:creator>Stephanie A. Higa</dc:creator><description>&lt;p&gt;Recently at work I wrote a messy bit of JavaScript (jQuery really) to create movable AND/OR statements. I learned how to code less than a year ago and haven't done any intense programming (yet, just wait), so this is probably the most difficult, headache-inducing, neck-wringing problem I've worked on to date. The last time I encountered this much trouble was when I learned about recursion and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Trie"&gt;tries&lt;/a&gt;. I figure I'll outline my thought process here in case it's useful to anyone else.&lt;/p&gt;
&lt;section id="the-assignment"&gt;
&lt;h2&gt;The assignment&lt;/h2&gt;
&lt;p&gt;The goal of these AND/OR statements was to allow users to perform searches with custom parameters. On the right side of the page would be two lists: one containing the available parameters (Location, Category, Subcategory) and the other containing the two operators (AND, OR). On the left two-thirds of the page would be where the user would drag the parameters and operators to build a full search statement.&lt;/p&gt;
&lt;p&gt;Full, well-formed search statements would have this format:
&lt;strong&gt;Location OR Category AND Subcategory&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Making elements sortable is fairly simple. Two words: &lt;a class="reference external" href="http://jqueryui.com/sortable/"&gt;jQuery UI&lt;/a&gt;. No, that wasn't the hard part at all. The hard part was following the rules given to me, which involved much tweaking of the sortable interaction and, as always, fighting with the DOM.&lt;/p&gt;
&lt;p&gt;The rules:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Parameters should never be next to parameters, and operators should never be next to operators, e.g., it shouldn't be possible to build statements like &lt;strong&gt;Location Category AND OR Subcategory&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Operators should never be at the beginning or ending of a statement, e.g., &lt;strong&gt;AND Category AND Subcategory OR&lt;/strong&gt;. Pretty much anything that doesn't make sense in natural language shouldn't be possible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a parameter or operator (for brevity's sake I'll call them "items" from now on) is dragged from the sidebar into a statement, the sidebar should repopulate with the missing item.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Parameters can be dragged into statements, and operators can be dragged into statements. All other dragging between lists should not be allowed. In other words, a parameter can't be dragged into the list of operators, an operator can't be dragged into the list of parameters, and blocks in statements can't be dragged back into the lists (to be honest, I implemented this last rule to make it slightly easier for me). Also, items can't be dragged from one statement to another.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since items in statements can't be dragged back into the list, there needs to be a way to clear a statement and start over.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each statement begins with an empty dotted box, to indicate that a new item can be placed there. As items are placed in the statement, the dotted box should move over to the right until the statement reaches its item limit. The item limit is five, as there are only three parameters and two operators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Items can be dragged within a statement, but again, parameters should never be next to parameters, and operators should never be next to operators.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Within a statement, if an item is dragged over a like block, it should switch with the like item. In other words, if "Location" is dragged over "Category," the two items should switch places.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When parameters are placed into a statement, they should become editable input boxes, so that the user can enter her preferred location, category, and subcategory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a user types into the "Location" input box, this should trigger an autocomplete place search. (I'd been playing with the &lt;a class="reference external" href="https://developers.google.com/places/"&gt;Google Places API&lt;/a&gt; the week prior to this for my &lt;a class="reference external" href="http://www.wehoeatmo.com"&gt;WeHo Eat Mo&lt;/a&gt; project, so this was fairly easy to implement.)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's about it. I created some of the rules as I went along based on the issues I faced while interacting with the interface. Bugs just kept on cropping up. (In fact, while writing this, I discovered a few more. Code is never finished.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="if-else-and-nothing-else"&gt;
&lt;h2&gt;If, else, and nothing else&lt;/h2&gt;
&lt;p&gt;The code I ended up writing is almost entirely made up of if‚Äìelse blocks. Here's the nested conditional monster that controls the "sortability" of items (variables are defined at the beginning of the sort):&lt;/p&gt;
&lt;pre class="literal-block"&gt;function sortRules(event, ui) {
        targetParent = ui.item.parent();
        targetParent.children('.ui-state-dotted').remove();

        // If the to-list is a statement and (1) the from-list is a item list or (2) the to-list and from-list are identical
        // Items can be rearranged within a single statement and dragged from a item list to a statement
        // Items cannot be dragged from one statement to another or from a statement to a item list
        if (targetParent.hasClass('fullStatement') &amp;amp;&amp;amp; (originalParent.hasClass('piece'))) {
                // Add a dotted box (implying that another item can be added) if the total statement length is shorter than five items
                // If the total statement length is equal to five items, don't add another dotted box, but don't cancel the sort, either
                if (targetParent.children('li:not(.delete):not(.ui-state-dotted)').length &amp;lt; 5) {
                        targetParent.append('&amp;lt;li class="ui-state-dotted"&amp;gt;&amp;lt;/li&amp;gt;');
                // Cancel the sort if the statement length has six or more items (including the current item)
                } else if (targetParent.children('li:not(.delete):not(.ui-state-dotted)').length &amp;gt;= 6) {
                        $(this).sortable('cancel');
                }

                // Add a delete button if the statement does not already have it
                if (targetParent.children('.delete').length === 0) {
                        $('&amp;lt;li class="delete"&amp;gt;x&amp;lt;/li&amp;gt;').insertBefore(targetParent.children('li:first-child'));
                }

                // Prevent like items from being placed next to each other
                // i.e., operators should never be next to operators, and parameters should never be next to parameters
                // Check if the item has the same class as the item before it or the item after it
                // or if the item is an operator and (1) the previous item is not a parameter (e.g., operator or undefined),
                // (2) the next item is an operator, and (3) the next item is undefined
                // This prevents operators from being placed next to each other, at the beginning or end of a statement,
                // but allows them to appear before a dotted box
                if ((ui.item.attr('class') === ui.item.prev().attr('class')) || (ui.item.attr('class') === ui.item.next().attr('class')) || (ui.item.hasClass('operator') &amp;amp;&amp;amp; (!ui.item.prev().hasClass('parameter') || ui.item.next().hasClass('operator') || ui.item.next().attr('class') === undefined)) || ui.item.prev().hasClass('ui-state-dotted')) {
                        $(this).sortable('cancel');
                        checkCanceled(targetParent);
                // Otherwise, if the sort arrangement is allowed, continue with the sort
                } else {
                        if (ui.item.hasClass('parameter')) {
                                ui.item.html('&amp;lt;form class="handler"&amp;gt;&amp;lt;input type="text" class="search-input" name="search-input" value=""&amp;gt;&amp;lt;/form&amp;gt;');
                                ui.item.css('padding', '5px');
                        }
                        if (originalText === 'Location') {
                                ui.item.children('form').children('input').attr({
                                        'id': 'locationInput',
                                        'placeholder': 'Enter your city'
                                });
                                locationSearch();
                        } else {
                                ui.item.children('form').children('input').attr('placeholder', originalText);
                        }

                        originalParent.append('&amp;lt;li class="' + ui.item.attr('class') + '"&amp;gt;' + originalHTML + '&amp;lt;/li&amp;gt;');
                        deleteParameter(targetParent);
                }
        } else if (targetParent.attr('id') === originalParent.attr('id')) {
                // Grab the new target index of the item (after the sort ends)
                newIndex = ui.item.index();
                // Swap the current item with the item at its target index
                // if the target item is an even number away from the current item,
                // so that only like items are swapped with each other
                if (Math.abs(originalIndex - newIndex) % 2 === 0 &amp;amp;&amp;amp; (ui.item.hasClass('operator') &amp;amp;&amp;amp; !ui.item.prev().hasClass('operator'))) {
                        ui.item.next().insertAfter(originalParent.children('li').eq(originalIndex));
                } else {
                        $(this).sortable('cancel');
                        checkCanceled(targetParent);
                }
        // Prevent items from being dragged from statements back into item lists
        } else {
                $(this).sortable('cancel');
                checkCanceled(targetParent);
        }
}&lt;/pre&gt;
&lt;p&gt;Yes, this function consists of one if‚Äìelse block with...I don't even know how many nested if‚Äìelse blocks inside of each of those conditions. It's terrifying. But it does the trick. Eventually I'd like to refactor this using a hash table, if that's possible. To see my progress on this project, &lt;a class="reference external" href="https://github.com/sahiga/movable-logic"&gt;check out my source code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;</description><category>javascript</category><category>jquery</category><guid>https://www.stephaniehiga.com/posts/movable-andor-statements/</guid><pubDate>Fri, 20 Sep 2013 20:07:16 GMT</pubDate></item></channel></rss>