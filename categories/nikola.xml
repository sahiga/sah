<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sahiga (Posts about nikola)</title><link>https://www.stephaniehiga.com/</link><description></description><atom:link href="https://www.stephaniehiga.com/categories/nikola.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 12 Apr 2020 21:12:55 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The Design of Everyday Blogs</title><link>https://www.stephaniehiga.com/posts/the-design-of-everyday-blogs/</link><dc:creator>Stephanie A. Higa</dc:creator><description>&lt;div&gt;&lt;p&gt;At the risk of losing all my design cred, I'll admit I put practically no effort or even thought into the way my blog looked until about a week ago. To put that into perspective: I wrote my first post here in May 2013. For most of the time since that point, it's been some variation of this default Bootstrap theme provided by Nikola, the static site generator I use:&lt;/p&gt;
&lt;img alt="My blog, circa February 2015" src="https://www.stephaniehiga.com/images/2015-02-24-site.png"&gt;
&lt;p&gt;Nikola, while excellent, has &lt;a class="reference external" href="http://themes.getnikola.com/"&gt;slim pickings for themes&lt;/a&gt;, and none of them are quite what I want my blog to look like. So when it came time for the big overhaul, I started (almost) from scratch with a new theme.&lt;/p&gt;
&lt;div class="section" id="the-process"&gt;
&lt;h2&gt;The process&lt;/h2&gt;
&lt;p&gt;Nikola themes live within the appropriately named &lt;strong&gt;themes&lt;/strong&gt; directory. My files are structured as follows:&lt;/p&gt;
&lt;pre class="literal-block"&gt;/theme-name
  /assets
    /css
      theme.css
  /templates
    base.tmpl
    index.tmpl
    post.tmpl
  engine
  parent&lt;/pre&gt;
&lt;p&gt;Here's an overview of what these files do (taken from the &lt;a class="reference external" href="http://getnikola.com/theming.html"&gt;Nikola theming reference&lt;/a&gt;):&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style="width: 11%"&gt;
&lt;col style="width: 89%"&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;p&gt;File Name&lt;/p&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;p&gt;Purpose&lt;/p&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;theme.css&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Custom CSS&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;base.tmpl&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Defines the basic layout for all pages&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;index.tmpl&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Defines pages that contain multiple posts (the "index" pages)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;post.tmpl&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Defines an individual post&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;engine&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Text file containing the name of the templating engine your theme uses. The two options are &lt;strong&gt;mako&lt;/strong&gt; and &lt;strong&gt;jinja&lt;/strong&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;p&gt;parent&lt;/p&gt;&lt;/td&gt;
&lt;td&gt;&lt;p&gt;Text file containing the name of the theme from which your theme inherits. Mine inherits from &lt;strong&gt;base&lt;/strong&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;That's it! I used the similarly bare &lt;a class="reference external" href="https://github.com/getnikola/nikola-themes/tree/master/v7/blogtxt"&gt;monospace theme&lt;/a&gt; as a guide. You can spruce up your theme with additional templates (see the &lt;a class="reference external" href="https://github.com/getnikola/nikola-themes/tree/master/v7/zen"&gt;zen theme&lt;/a&gt; for an example), but I decided to keep mine simple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="now-for-the-fun-stuff"&gt;
&lt;h2&gt;Now for the fun stuff!&lt;/h2&gt;
&lt;p&gt;There's another reason why the default theme didn't work that well for my blog: I'm wordy as hell. I don't write posts; I write &lt;em&gt;essays&lt;/em&gt;. So, rather than change my style of blogging, I thought I'd pull off an illusion. My main objective in redesigning this blog was to make it resemble a series of digestible sentences, as opposed to the giant wall of text that it actually is.&lt;/p&gt;
&lt;p&gt;For inspiration, I looked at &lt;a class="reference external" href="http://www.medium.com"&gt;Medium&lt;/a&gt;, &lt;a class="reference external" href="http://longreads.com/"&gt;Longreads&lt;/a&gt;, &lt;a class="reference external" href="http://nautil.us/"&gt;Nautilus&lt;/a&gt;, &lt;a class="reference external" href="http://aeon.co"&gt;Aeon&lt;/a&gt;, and all the other beautiful text-heavy sites that have cropped up in recent years.&lt;/p&gt;
&lt;div class="section" id="fonts"&gt;
&lt;h3&gt;Fonts&lt;/h3&gt;
&lt;p&gt;Typefaces can make or break a design. For the headers, I picked &lt;strong&gt;Lato&lt;/strong&gt;, my favorite web font of all time; for regular text, &lt;strong&gt;Lora&lt;/strong&gt;, my other favorite web font of all time. Both are available on &lt;a class="reference external" href="https://www.google.com/fonts"&gt;Google Fonts&lt;/a&gt;. To improve readability, I increased the size of the text and the space between each line.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="colors"&gt;
&lt;h3&gt;Colors&lt;/h3&gt;
&lt;p&gt;The link styles (salmon color + hover transitions) are from an old WordPress theme I created back in 2012, before I became a front-end developer. My CSS may have improved since then, but my visual tastes haven't changed much.&lt;/p&gt;
&lt;p&gt;My first pass at the new theme had an entirely white background, which tested poorly. "It's &lt;strong&gt;really&lt;/strong&gt; white," commented one of my Hack Reactor classmates, as he shielded his eyes from the glare.&lt;sup&gt;*&lt;/sup&gt; I subsequently reduced the white space and added a background from &lt;a class="reference external" href="http://www.subtlepatterns.com"&gt;Subtle Patterns&lt;/a&gt;. I picked a food icon pattern because, well, I love food.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="other-changes"&gt;
&lt;h3&gt;Other changes&lt;/h3&gt;
&lt;p&gt;I removed the Share button that used to sit in the bottom right corner. It took me forever to figure out how to do this, but all I had to do was uncomment the &lt;code class="docutils literal"&gt;SOCIAL_BUTTONS_CODE = ""&lt;/code&gt; line in &lt;strong&gt;conf.py&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-thoughts"&gt;
&lt;h2&gt;Final thoughts&lt;/h2&gt;
&lt;p&gt;Designs are never finished, but I'm happy with how my blog looks right now. I plan to implement a hamburger menu for smaller screens within the upcoming weeks. If you have any suggestions, or find your viewing experience to be less than optimal, please let me know.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt; With much gratitude to my Hack Reactor classmates for giving me the necessary push to redesign my blog.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>design</category><category>nikola</category><guid>https://www.stephaniehiga.com/posts/the-design-of-everyday-blogs/</guid><pubDate>Mon, 02 Mar 2015 00:27:26 GMT</pubDate></item><item><title>Goodbye, WordPress! Hello, Nikola!</title><link>https://www.stephaniehiga.com/posts/goodbye-wordpress-hello-nikola/</link><dc:creator>Stephanie A. Higa</dc:creator><description>&lt;div&gt;&lt;p&gt;It's official: I've finally migrated my personal website from &lt;a class="reference external" href="http://www.wordpress.org"&gt;WordPress&lt;/a&gt; to &lt;a class="reference external" href="http://nikola.ralsina.com.ar"&gt;Nikola&lt;/a&gt;, a static site generator. In my 53432099809th attempt to return to writing, I'll use this bit of nerd news to jumpstart what I hope will become a regular blogging habit.&lt;/p&gt;
&lt;div class="section" id="the-quest-for-static"&gt;
&lt;h2&gt;The quest for static&lt;/h2&gt;
&lt;p&gt;WordPress gets a lot of hate in the development community. Let me say upfront that this is absolutely not the reason I decided to leave it (I have the softest of spots for WordPress). It's just that one day I woke up and realized I didn't need a database and a gazillion server queries to post text on my website.&lt;/p&gt;
&lt;p&gt;So I started looking into static site generators. A static site generator does exactly what's written on the box: it creates a static site. It combines the best of Web 1.0 (fast, portable, secure HTML pages) with the best of Web 2.0 (templates). I considered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; + &lt;a class="reference external" href="http://www.octopress.org"&gt;Octopress&lt;/a&gt;: Hooks directly into &lt;a class="reference external" href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; and is apparently very good. But I don't know Ruby, so I kept looking.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://ringce.com/hyde"&gt;Hyde&lt;/a&gt;: A Python port of Jekyll. Ultimately, I passed on it because of the lack of documentation. When it comes to technology, this Luddite needs a lot of hand-holding.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt;: Also Python-based, with complete, well-written documentation. I installed it and got lost while trying to generate files. Pelican looks like a great choice, but I think it's meant for people who are much more tech-savvy than I am.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Shortly after I installed Pelican, someone posted a link to &lt;a class="reference external" href="http://nikola.ralsina.com.ar"&gt;Nikola&lt;/a&gt; on Hacker News. I'm not sure why it didn't come up in all my searches for Python-based static site generators, because so far it's proven to be a dream come true. The documentation is amazing. It's easy to use and in active development. And it was named after &lt;a class="reference external" href="http://theoatmeal.com/comics/tesla"&gt;Nikola Tesla&lt;/a&gt;. (&lt;strong&gt;Huge&lt;/strong&gt; Nikola Tesla fan here.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="goodbye-wordpress"&gt;
&lt;h2&gt;Goodbye, WordPress&lt;/h2&gt;
&lt;p&gt;Nikola has an &lt;code class="docutils literal"&gt;import_wordpress&lt;/code&gt; function to ease the transition to WordPress. I grabbed an XML dump of my site (&lt;strong&gt;Tools &amp;gt; Export &amp;gt; All Content&lt;/strong&gt; in the WP admin panel) and saved it in my Nikola site folder.&lt;/p&gt;
&lt;p&gt;I installed the Python &lt;a class="reference external" href="https://pypi.python.org/pypi/requests"&gt;requests&lt;/a&gt; package (import_wordpress depends on requests):&lt;/p&gt;
&lt;pre class="literal-block"&gt;sudo pip install requests&lt;/pre&gt;
&lt;p&gt;Then I ran import_wordpress on the file:&lt;/p&gt;
&lt;pre class="literal-block"&gt;nikola import_wordpress stephanieahiga.wordpress.2013-05-05.xml&lt;/pre&gt;
&lt;p&gt;This created a new folder, &lt;strong&gt;new_site&lt;/strong&gt;, within the Nikola folder. I had no posts and only a handful of pages in my WordPress database, so I recreated the pages manually using the page command: &lt;code class="docutils literal"&gt;nikola new_post &lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/code&gt;. Similar to WordPress, Nikola differentiates between posts and pages: posts are in the &lt;strong&gt;posts&lt;/strong&gt; folder and pages are in the &lt;strong&gt;stories&lt;/strong&gt; folder.&lt;/p&gt;
&lt;p&gt;Finally, I uninstalled WordPress from my domain via &lt;a class="reference external" href="https://www.simplescripts.com"&gt;SimpleScripts&lt;/a&gt; on my cPanel.&lt;/p&gt;
&lt;p&gt;import_wordpress saves all posts and pages with the &lt;code class="docutils literal"&gt;.wp&lt;/code&gt; extension (read by my computer as WordPerfect files). The XML dump, and therefore the folder created by import_wordpress, save the contents of the WordPress database, but &lt;strong&gt;not&lt;/strong&gt; the theme files. So it's important to backup any custom themes before uninstalling WordPress.&lt;/p&gt;
&lt;p&gt;Tutorials on importing WordPress posts into Nikola:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://nikola.ralsina.com.ar/handbook.html#importing-your-wordpress-site-into-nikola"&gt;Official site&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://flexion.org/posts/2012-10-migrating-wordpress-to-nikola.html"&gt;Flexion.Org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://kushaldas.in/posts/importing-your-wordpress-blog-to-nikola.html"&gt;Kushal Das&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-nikola"&gt;
&lt;h2&gt;Hello, Nikola&lt;/h2&gt;
&lt;p&gt;I assume that the next step is to upload the Nikola site folder to my domain server. If you're reading this post, you can assume that my assumption turned out to be true.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>nikola</category><category>static site generators</category><category>wordpress</category><guid>https://www.stephaniehiga.com/posts/goodbye-wordpress-hello-nikola/</guid><pubDate>Sat, 04 May 2013 14:09:26 GMT</pubDate></item></channel></rss>